//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vBeta
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2008.03.03 at 06:35:29 SGT
//

package sparrow.elt.jaxb.impl;

public class DATAHANDLERTypeImpl
    implements sparrow.elt.jaxb.DATAHANDLERType,
    com.sun.xml.bind.unmarshaller.UnmarshallableObject,
    com.sun.xml.bind.serializer.XMLSerializable,
    com.sun.xml.bind.validator.ValidatableObject {

  private final static Class PRIMARY_INTERFACE_CLASS = sparrow.elt.jaxb.
      DATAHANDLERType.class;
  protected String _TYPE;
  protected java.util.ArrayList _PARAM = new java.util.ArrayList();
  protected String _CLASS;
  protected sparrow.elt.jaxb.DATAHANDLERType.QUERYType _QUERY;
  protected String _NAME;
  private final static com.sun.msv.grammar.Grammar schemaFragment = com.sun.xml.
      bind.validator.SchemaDeserializer.deserialize("\u00ac\u00ed\u0000\u0005sr\u0000\u001fcom.sun.msv.grammar.SequenceExp\u0091Ue\u00f1\u0017p\u00f3\u00ad\u0002\u0000\u0000xr\u0000\u001dcom.sun.msv.grammar.BinaryExp\u009f\u008d\u000fi<\u00c1_\u00b7\u0002\u0000\u0002L\u0000\u0004exp1t\u0000 Lcom/sun/msv/grammar/Expression;L\u0000\u0004exp2q\u0000~\u0000\u0002xr\u0000\u001ecom.sun.msv.grammar.Expression\u00f8\u0018\u0082\u00e8N5~O\u0002\u0000\u0003I\u0000\u000ecachedHashCodeL\u0000\u0013epsilonReducibilityt\u0000\u0013Ljava/lang/Boolean;L\u0000\u000bexpandedExpq\u0000~\u0000\u0002xp\u0006\u0000\u0017\u00b1ppsq\u0000~\u0000\u0000\u0004w\u00b4\u0000ppsq\u0000~\u0000\u0000\u0002\u00c3\u00a5Gppsq\u0000~\u0000\u0000\u0001F<\u00a3ppsr\u0000\'com.sun.msv.grammar.trex.ElementPattern\u008b\u0010\u001fsu\u008b\u0091\u00c2\u0002\u0000\u0001L\u0000\tnameClasst\u0000\u001fLcom/sun/msv/grammar/NameClass;xr\u0000\u001ecom.sun.msv.grammar.ElementExp\u00d3\u00c6b\u0095\u0015\rC\u0092\u0002\u0000\u0002Z\u0000\u001aignoreUndeclaredAttributesL\u0000\fcontentModelq\u0000~\u0000\u0002xq\u0000~\u0000\u0003\u0000\u00a3\u001eHpp\u0000sq\u0000~\u0000\t\u0000\u00a3\u001e=pp\u0000sr\u0000\u001dcom.sun.msv.grammar.ChoiceExp\u00c6|\u00ec3\u0087\u00b8\u00f9\u00f4\u0002\u0000\u0000xq\u0000~\u0000\u0001\u0000\u00a3\u001e2ppsr\u0000 com.sun.msv.grammar.OneOrMoreExp\u00cc;^\u00bb\u0004E\u00cc\u00db\u0002\u0000\u0000xr\u0000\u001ccom.sun.msv.grammar.UnaryExp\'\u00bbhe^\u001f_5\u0002\u0000\u0001L\u0000\u0003expq\u0000~\u0000\u0002xq\u0000~\u0000\u0003\u0000\u00a3\u001e\'sr\u0000\u0011java.lang.Boolean\u00cd r\u0080\u00d5\u009c\u00fa\u00ee\u0002\u0000\u0001Z\u0000\u0005valuexp\u0000psr\u0000 com.sun.msv.grammar.AttributeExp0\rR\n\u00c7L\n\u0099\u0002\u0000\u0002L\u0000\u0003expq\u0000~\u0000\u0002L\u0000\tnameClassq\u0000~\u0000\nxq\u0000~\u0000\u0003\u0000\u00a3\u001e$q\u0000~\u0000\u0014psr\u00002com.sun.msv.grammar.Expression$AnyStringExpression\u00cb\u00b2\u00f3\u00c9\u0081\u0000\u000f\u00bc\u0002\u0000\u0000xq\u0000~\u0000\u0003\u0000\u0000\u0000\bsq\u0000~\u0000\u0013\u0001psr\u0000 com.sun.msv.grammar.AnyNameClass\u00c3p\u00af\u0013\u00eft\u0094\u00bd\u0002\u0000\u0000xr\u0000\u001dcom.sun.msv.grammar.NameClass\u009c}\u00d4kB\u00c7\tk\u0002\u0000\u0000xpsr\u00000com.sun.msv.grammar.Expression$EpsilonExpression\u0098v\u00e3\u0003Z\u00fex\u00ee\u0002\u0000\u0000xq\u0000~\u0000\u0003\u0000\u0000\u0000\tq\u0000~\u0000\u0019psr\u0000#com.sun.msv.grammar.SimpleNameClass\u0091\u00e9\u00f7\u008d\u00ab\u0010\u00aa\u00f5\u0002\u0000\u0002L\u0000\tlocalNamet\u0000\u0012Ljava/lang/String;L\u0000\fnamespaceURIq\u0000~\u0000 xq\u0000~\u0000\u001bt\u0000.com.cs.sg.spear.jaxb.DATAHANDLERType.QUERYTypet\u0000+http://java.sun.com/jaxb/xjc/dummy-elementssq\u0000~\u0000\u001ft\u0000\u0005QUERYt\u0000\u0000sq\u0000~\u0000\u000e\u0000\u00a3\u001eVppsq\u0000~\u0000\u0010\u0000\u00a3\u001eKq\u0000~\u0000\u0014psq\u0000~\u0000\t\u0000\u00a3\u001eHq\u0000~\u0000\u0014p\u0000sq\u0000~\u0000\t\u0000\u00a3\u001e=pp\u0000sq\u0000~\u0000\u000e\u0000\u00a3\u001e2ppsq\u0000~\u0000\u0010\u0000\u00a3\u001e\'q\u0000~\u0000\u0014psq\u0000~\u0000\u0015\u0000\u00a3\u001e$q\u0000~\u0000\u0014pq\u0000~\u0000\u0018q\u0000~\u0000\u001cq\u0000~\u0000\u001esq\u0000~\u0000\u001ft\u0000\u001ecom.cs.sg.spear.jaxb.PARAMTypeq\u0000~\u0000#sq\u0000~\u0000\u001ft\u0000\u0005PARAMq\u0000~\u0000&q\u0000~\u0000\u001esq\u0000~\u0000\u000e\u0001}h\u009fppsq\u0000~\u0000\u0015\u0001}h\u0094q\u0000~\u0000\u0014psr\u0000\u001bcom.sun.msv.grammar.DataExp8\u00f5\u00f5>{j!\u00cb\u0002\u0000\u0003L\u0000\u0002dtt\u0000\u001fLorg/relaxng/datatype/Datatype;L\u0000\u0006exceptq\u0000~\u0000\u0002L\u0000\u0004namet\u0000\u001dLcom/sun/msv/util/StringPair;xq\u0000~\u0000\u0003\u0000\u000bw\nppsr\u0000#com.sun.msv.datatype.xsd.StringType\u00c0\t\u00a9y\u00f6\u0011\u009b\u00e6\u0002\u0000\u0000xr\u0000*com.sun.msv.datatype.xsd.BuiltinAtomicType\u0002\u00ff10\u00a8bR\u00ca\u0002\u0000\u0000xr\u0000%com.sun.msv.datatype.xsd.ConcreteType7\u00adsa|\u00d7Z\u001d\u0002\u0000\u0000xr\u0000\'com.sun.msv.datatype.xsd.XSDatatypeImpl4\u00e9\u0099H.\u00872z\u0002\u0000\u0003L\u0000\fnamespaceUriq\u0000~\u0000 L\u0000\btypeNameq\u0000~\u0000 L\u0000\nwhiteSpacet\u0000.Lcom/sun/msv/datatype/xsd/WhiteSpaceProcessor;xpt\u0000 http://www.w3.org/2001/XMLSchemat\u0000\u0006stringsr\u0000.com.sun.msv.datatype.xsd.WhiteSpaceProcessor$1\u0013JMoI\u00db\u00a4G\u0002\u0000\u0000xr\u0000,com.sun.msv.datatype.xsd.WhiteSpaceProcessorip\u00ff0C\u00ce\u000eN\u0002\u0000\u0000xpsr\u00000com.sun.msv.grammar.Expression$NullSetExpression s\u0080\u0089\u0096\u00cf\u009a@\u0002\u0000\u0000xq\u0000~\u0000\u0003\u0000\u0000\u0000\nq\u0000~\u0000\u0014psr\u0000\u001bcom.sun.msv.util.StringPair\u00d0t\u001ejB\u008f\u008d\u00a0\u0002\u0000\u0002L\u0000\tlocalNameq\u0000~\u0000 L\u0000\fnamespaceURIq\u0000~\u0000 xpq\u0000~\u0000?q\u0000~\u0000>sq\u0000~\u0000\u001ft\u0000\u0005CLASSq\u0000~\u0000&q\u0000~\u0000\u001esq\u0000~\u0000\u0015\u0001\u00b4\u000e\u00b4ppq\u0000~\u00007sq\u0000~\u0000\u001ft\u0000\u0004NAMEq\u0000~\u0000&sq\u0000~\u0000\u000e\u0001\u0088c\u00acppsq\u0000~\u0000\u0015\u0001\u0088c\u00a1q\u0000~\u0000\u0014pq\u0000~\u00007sq\u0000~\u0000\u001ft\u0000\u0004TYPEq\u0000~\u0000&q\u0000~\u0000\u001esr\u0000\"com.sun.msv.grammar.ExpressionPool\u00e5\u00f3J;\u00cd]^\u00f8\u0002\u0000\u0001L\u0000\bexpTablet\u0000/Lcom/sun/msv/grammar/ExpressionPool$ClosedHash;xpsr\u0000-com.sun.msv.grammar.ExpressionPool$ClosedHash\u00d7j\u00d0N\u00ef\u00e8\u00ed\u001c\u0002\u0000\u0004I\u0000\u0005countI\u0000\tthresholdL\u0000\u0006parentq\u0000~\u0000Q[\u0000\u0005tablet\u0000![Lcom/sun/msv/grammar/Expression;xp\u0000\u0000\u0000\f\u0000\u0000\u00009pur\u0000![Lcom.sun.msv.grammar.Expression;\u00d68D\u00c3]\u00ad\u00a7\n\u0002\u0000\u0000xp\u0000\u0000\u0000\u00bfppppppppq\u0000~\u0000\u0012q\u0000~\u0000,pppppppppq\u0000~\u0000\u000fq\u0000~\u0000+q\u0000~\u00002ppppppppppppppppppppppq\u0000~\u0000(ppppppppppq\u0000~\u0000\'pppppppppppppppppppppppppppppppppppppppppppppq\u0000~\u0000\bppppppppppppppppppppppppq\u0000~\u0000\u0007ppppppppppq\u0000~\u0000\u0005ppppppppppppppq\u0000~\u0000Lppppppppppppppppppq\u0000~\u0000\u0006ppppppppppppppppppp"

      );
  public String getTYPE() {
    if (_TYPE == null) {
      return "DB";
    }
    else {
      return _TYPE;
    }
  }

  public void setTYPE(String value) {
    _TYPE = value;
  }

  public java.util.List getPARAM() {
    return _PARAM;
  }

  public String getCLASS() {
    return _CLASS;
  }

  public void setCLASS(String value) {
    _CLASS = value;
  }

  public sparrow.elt.jaxb.DATAHANDLERType.QUERYType getQUERY() {
    return _QUERY;
  }

  public void setQUERY(sparrow.elt.jaxb.DATAHANDLERType.QUERYType value) {
    _QUERY = value;
  }

  public String getNAME() {
    return _NAME;
  }

  public void setNAME(String value) {
    _NAME = value;
  }

  public com.sun.xml.bind.unmarshaller.ContentHandlerEx getUnmarshaller(com.sun.
      xml.bind.unmarshaller.UnmarshallingContext context) {
    return new sparrow.elt.jaxb.impl.DATAHANDLERTypeImpl.Unmarshaller(
        context);
  }

  public Class getPrimaryInterfaceClass() {
    return PRIMARY_INTERFACE_CLASS;
  }

  public void serializeElements(com.sun.xml.bind.serializer.XMLSerializer
                                context) throws org.xml.sax.SAXException {
    int idx2 = 0;
    final int len2 = _PARAM.size();
    context.startElement("", "QUERY");
    context.childAsAttributes( ( (com.sun.xml.bind.serializer.XMLSerializable)
                                _QUERY));
    context.endAttributes();
    context.childAsElements( ( (com.sun.xml.bind.serializer.XMLSerializable)
                              _QUERY));
    context.endElement();
    while (idx2 != len2) {
      context.startElement("", "PARAM");
      int idx_1 = idx2;
      context.childAsAttributes( ( (com.sun.xml.bind.serializer.XMLSerializable)
                                  _PARAM.get(idx_1++)));
      context.endAttributes();
      context.childAsElements( ( (com.sun.xml.bind.serializer.XMLSerializable)
                                _PARAM.get(idx2++)));
      context.endElement();
    }
  }

  public void serializeAttributes(com.sun.xml.bind.serializer.XMLSerializer
                                  context) throws org.xml.sax.SAXException {
    int idx2 = 0;
    final int len2 = _PARAM.size();
    if (_CLASS != null) {
      context.startAttribute("", "CLASS");
      context.text( ( (String) _CLASS));
      context.endAttribute();
    }
    context.startAttribute("", "NAME");
    context.text( ( (String) _NAME));
    context.endAttribute();
    if (_TYPE != null) {
      context.startAttribute("", "TYPE");
      context.text( ( (String) _TYPE));
      context.endAttribute();
    }
  }

  public void serializeAttributeBodies(com.sun.xml.bind.serializer.
                                       XMLSerializer context) throws org.xml.
      sax.SAXException {
    int idx2 = 0;
    final int len2 = _PARAM.size();
  }

  public Class getPrimaryInterface() {
    return (sparrow.elt.jaxb.DATAHANDLERType.class);
  }

  public com.sun.msv.verifier.DocumentDeclaration createRawValidator() {
    return new com.sun.msv.verifier.regexp.REDocumentDeclaration(schemaFragment);
  }

  public static class QUERYTypeImpl
      implements sparrow.elt.jaxb.DATAHANDLERType.QUERYType,
      com.sun.xml.bind.unmarshaller.UnmarshallableObject,
      com.sun.xml.bind.serializer.XMLSerializable,
      com.sun.xml.bind.validator.ValidatableObject {

    private final static Class PRIMARY_INTERFACE_CLASS = sparrow.elt.jaxb.
        DATAHANDLERType.QUERYType.class;
    protected boolean has_FETCHSIZE;
    protected int _FETCHSIZE;
    protected String _DBSOURCE;
    protected String _RESULTWRAP;
    private final static com.sun.msv.grammar.Grammar schemaFragment = com.sun.
        xml.bind.validator.SchemaDeserializer.deserialize("\u00ac\u00ed\u0000\u0005sr\u0000\u001fcom.sun.msv.grammar.SequenceExp\u0091Ue\u00f1\u0017p\u00f3\u00ad\u0002\u0000\u0000xr\u0000\u001dcom.sun.msv.grammar.BinaryExp\u009f\u008d\u000fi<\u00c1_\u00b7\u0002\u0000\u0002L\u0000\u0004exp1t\u0000 Lcom/sun/msv/grammar/Expression;L\u0000\u0004exp2q\u0000~\u0000\u0002xr\u0000\u001ecom.sun.msv.grammar.Expression\u00f8\u0018\u0082\u00e8N5~O\u0002\u0000\u0003I\u0000\u000ecachedHashCodeL\u0000\u0013epsilonReducibilityt\u0000\u0013Ljava/lang/Boolean;L\u0000\u000bexpandedExpq\u0000~\u0000\u0002xp\u0003\u00cf\u0012\u00dbppsq\u0000~\u0000\u0000\u0002\u0012\u00de\u0003ppsr\u0000\u001dcom.sun.msv.grammar.ChoiceExp\u00c6|\u00ec3\u0087\u00b8\u00f9\u00f4\u0002\u0000\u0000xq\u0000~\u0000\u0001\u0000$\u00f2\u00cdppsr\u0000 com.sun.msv.grammar.AttributeExp0\rR\n\u00c7L\n\u0099\u0002\u0000\u0002L\u0000\u0003expq\u0000~\u0000\u0002L\u0000\tnameClasst\u0000\u001fLcom/sun/msv/grammar/NameClass;xq\u0000~\u0000\u0003\u0000$\u00f2\u00c2sr\u0000\u0011java.lang.Boolean\u00cd r\u0080\u00d5\u009c\u00fa\u00ee\u0002\u0000\u0001Z\u0000\u0005valuexp\u0000psr\u0000\u001bcom.sun.msv.grammar.DataExp8\u00f5\u00f5>{j!\u00cb\u0002\u0000\u0003L\u0000\u0002dtt\u0000\u001fLorg/relaxng/datatype/Datatype;L\u0000\u0006exceptq\u0000~\u0000\u0002L\u0000\u0004namet\u0000\u001dLcom/sun/msv/util/StringPair;xq\u0000~\u0000\u0003\u0000\u000bw\nppsr\u0000#com.sun.msv.datatype.xsd.StringType\u00c0\t\u00a9y\u00f6\u0011\u009b\u00e6\u0002\u0000\u0000xr\u0000*com.sun.msv.datatype.xsd.BuiltinAtomicType\u0002\u00ff10\u00a8bR\u00ca\u0002\u0000\u0000xr\u0000%com.sun.msv.datatype.xsd.ConcreteType7\u00adsa|\u00d7Z\u001d\u0002\u0000\u0000xr\u0000\'com.sun.msv.datatype.xsd.XSDatatypeImpl4\u00e9\u0099H.\u00872z\u0002\u0000\u0003L\u0000\fnamespaceUrit\u0000\u0012Ljava/lang/String;L\u0000\btypeNameq\u0000~\u0000\u0016L\u0000\nwhiteSpacet\u0000.Lcom/sun/msv/datatype/xsd/WhiteSpaceProcessor;xpt\u0000 http://www.w3.org/2001/XMLSchemat\u0000\u0006stringsr\u0000.com.sun.msv.datatype.xsd.WhiteSpaceProcessor$1\u0013JMoI\u00db\u00a4G\u0002\u0000\u0000xr\u0000,com.sun.msv.datatype.xsd.WhiteSpaceProcessorip\u00ff0C\u00ce\u000eN\u0002\u0000\u0000xpsr\u00000com.sun.msv.grammar.Expression$NullSetExpression s\u0080\u0089\u0096\u00cf\u009a@\u0002\u0000\u0000xq\u0000~\u0000\u0003\u0000\u0000\u0000\nq\u0000~\u0000\rpsr\u0000\u001bcom.sun.msv.util.StringPair\u00d0t\u001ejB\u008f\u008d\u00a0\u0002\u0000\u0002L\u0000\tlocalNameq\u0000~\u0000\u0016L\u0000\fnamespaceURIq\u0000~\u0000\u0016xpq\u0000~\u0000\u001aq\u0000~\u0000\u0019sr\u0000#com.sun.msv.grammar.SimpleNameClass\u0091\u00e9\u00f7\u008d\u00ab\u0010\u00aa\u00f5\u0002\u0000\u0002L\u0000\tlocalNameq\u0000~\u0000\u0016L\u0000\fnamespaceURIq\u0000~\u0000\u0016xr\u0000\u001dcom.sun.msv.grammar.NameClass\u009c}\u00d4kB\u00c7\tk\u0002\u0000\u0000xpt\u0000\u000bRESULT-WRAPt\u0000\u0000sr\u00000com.sun.msv.grammar.Expression$EpsilonExpression\u0098v\u00e3\u0003Z\u00fex\u00ee\u0002\u0000\u0000xq\u0000~\u0000\u0003\u0000\u0000\u0000\tsq\u0000~\u0000\f\u0001psq\u0000~\u0000\u0007\u0001\u00ed\u00eb1ppsq\u0000~\u0000\t\u0001\u00ed\u00eb&q\u0000~\u0000\rpsq\u0000~\u0000\u000e\u0000\u00e4\u009d\u00ddppsr\u0000 com.sun.msv.datatype.xsd.IntType\u00bel\u00b6\u0018\u00b0\u0014\u00e4\u0014\u0002\u0000\u0000xr\u0000+com.sun.msv.datatype.xsd.IntegerDerivedType\u0099\u00f1]\u0090&6k\u00be\u0002\u0000\u0000xq\u0000~\u0000\u0013q\u0000~\u0000\u0019t\u0000\u0003intsr\u0000.com.sun.msv.datatype.xsd.WhiteSpaceProcessor$2\u0087z9\u00ee\u00f8,N\u0005\u0002\u0000\u0000xq\u0000~\u0000\u001cq\u0000~\u0000\u001fsq\u0000~\u0000 q\u0000~\u00000q\u0000~\u0000\u0019sq\u0000~\u0000\"t\u0000\nFETCH-SIZEq\u0000~\u0000&q\u0000~\u0000(sq\u0000~\u0000\t\u0001\u00bc4\u00d3ppq\u0000~\u0000\u0011sq\u0000~\u0000\"t\u0000\tDB-SOURCEq\u0000~\u0000&sr\u0000\"com.sun.msv.grammar.ExpressionPool\u00e5\u00f3J;\u00cd]^\u00f8\u0002\u0000\u0001L\u0000\bexpTablet\u0000/Lcom/sun/msv/grammar/ExpressionPool$ClosedHash;xpsr\u0000-com.sun.msv.grammar.ExpressionPool$ClosedHash\u00d7j\u00d0N\u00ef\u00e8\u00ed\u001c\u0002\u0000\u0004I\u0000\u0005countI\u0000\tthresholdL\u0000\u0006parentq\u0000~\u0000:[\u0000\u0005tablet\u0000![Lcom/sun/msv/grammar/Expression;xp\u0000\u0000\u0000\u0004\u0000\u0000\u00009pur\u0000![Lcom.sun.msv.grammar.Expression;\u00d68D\u00c3]\u00ad\u00a7\n\u0002\u0000\u0000xp\u0000\u0000\u0000\u00bfppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppq\u0000~\u0000\u0006pppppppppppppppppppppppppppppppppppppppq\u0000~\u0000*pppppppppppppppq\u0000~\u0000\u0005pppppppppppppppq\u0000~\u0000\bpppppppppppppppppppppppppppppppppppppppppppp"

        );
    public int getFETCHSIZE() {
      if (!has_FETCHSIZE) {
        return com.sun.msv.datatype.xsd.IntType.load(com.sun.xml.bind.
            WhiteSpaceProcessor.collapse("0")).intValue();
      }
      else {
        return _FETCHSIZE;
      }
    }

    public void setFETCHSIZE(int value) {
      _FETCHSIZE = value;
      has_FETCHSIZE = true;
    }

    public String getDBSOURCE() {
      return _DBSOURCE;
    }

    public void setDBSOURCE(String value) {
      _DBSOURCE = value;
    }

    public String getRESULTWRAP() {
      if (_RESULTWRAP == null) {
        return "disconnected";
      }
      else {
        return _RESULTWRAP;
      }
    }

    public void setRESULTWRAP(String value) {
      _RESULTWRAP = value;
    }

    public com.sun.xml.bind.unmarshaller.ContentHandlerEx getUnmarshaller(com.
        sun.xml.bind.unmarshaller.UnmarshallingContext context) {
      return new sparrow.elt.jaxb.impl.DATAHANDLERTypeImpl.QUERYTypeImpl.
          Unmarshaller(context);
    }

    public Class getPrimaryInterfaceClass() {
      return PRIMARY_INTERFACE_CLASS;
    }

    public void serializeElements(com.sun.xml.bind.serializer.XMLSerializer
                                  context) throws org.xml.sax.SAXException {
    }

    public void serializeAttributes(com.sun.xml.bind.serializer.XMLSerializer
                                    context) throws org.xml.sax.SAXException {
      if (_RESULTWRAP != null) {
        context.startAttribute("", "RESULT-WRAP");
        context.text( ( (String) _RESULTWRAP));
        context.endAttribute();
      }
      if (has_FETCHSIZE) {
        context.startAttribute("", "FETCH-SIZE");
        context.text(com.sun.msv.datatype.xsd.IntType.save( ( (Integer)new java.
            lang.Integer(_FETCHSIZE))));
        context.endAttribute();
      }
      context.startAttribute("", "DB-SOURCE");
      context.text( ( (String) _DBSOURCE));
      context.endAttribute();
    }

    public void serializeAttributeBodies(com.sun.xml.bind.serializer.
                                         XMLSerializer context) throws org.xml.
        sax.SAXException {
    }

    public Class getPrimaryInterface() {
      return (sparrow.elt.jaxb.DATAHANDLERType.QUERYType.class);
    }

    public com.sun.msv.verifier.DocumentDeclaration createRawValidator() {
      return new com.sun.msv.verifier.regexp.REDocumentDeclaration(
          schemaFragment);
    }

    public class Unmarshaller
        extends com.sun.xml.bind.unmarshaller.ContentHandlerEx {

      public Unmarshaller(com.sun.xml.bind.unmarshaller.UnmarshallingContext
                          context) {
        super(context, "-------");
      }

      protected com.sun.xml.bind.unmarshaller.UnmarshallableObject owner() {
        return sparrow.elt.jaxb.impl.DATAHANDLERTypeImpl.QUERYTypeImpl.this;
      }

      public void enterElement(String ___uri, String ___local,
                               org.xml.sax.Attributes __atts) throws com.sun.
          xml.bind.unmarshaller.UnreportedException {
        switch (state) {
          case 0:
            revertToParentFromEnterElement(___uri, ___local, __atts);
            return;
        }
        super.enterElement(___uri, ___local, __atts);
      }

      public void leaveElement(String ___uri, String ___local) throws com.sun.
          xml.bind.unmarshaller.UnreportedException {
        switch (state) {
          case 0:
            revertToParentFromLeaveElement(___uri, ___local);
            return;
        }
        super.leaveElement(___uri, ___local);
      }

      public void enterAttribute(String ___uri, String ___local) throws com.sun.
          xml.bind.unmarshaller.UnreportedException {
        switch (state) {
          case 0:
            if ("".equals(___uri) && "DB-SOURCE".equals(___local)) {
              state = 3;
              return;
            }
            if ("".equals(___uri) && "FETCH-SIZE".equals(___local)) {
              state = 1;
              return;
            }
            if ("".equals(___uri) && "RESULT-WRAP".equals(___local)) {
              state = 5;
              return;
            }
            revertToParentFromEnterAttribute(___uri, ___local);
            return;
        }
        super.enterAttribute(___uri, ___local);
      }

      public void leaveAttribute(String ___uri, String ___local) throws com.sun.
          xml.bind.unmarshaller.UnreportedException {
        switch (state) {
          case 4:
            if ("".equals(___uri) && "DB-SOURCE".equals(___local)) {
              goto0();
              return;
            }
            break;
          case 2:
            if ("".equals(___uri) && "FETCH-SIZE".equals(___local)) {
              goto0();
              return;
            }
            break;
          case 6:
            if ("".equals(___uri) && "RESULT-WRAP".equals(___local)) {
              goto0();
              return;
            }
            break;
          case 0:
            revertToParentFromLeaveAttribute(___uri, ___local);
            return;
        }
        super.leaveAttribute(___uri, ___local);
      }

      public void text(String value) throws com.sun.xml.bind.unmarshaller.
          UnreportedException {
        try {
          switch (state) {
            case 1:
              _FETCHSIZE = com.sun.msv.datatype.xsd.IntType.load(com.sun.xml.
                  bind.WhiteSpaceProcessor.collapse(value)).intValue();
              has_FETCHSIZE = true;
              state = 2;
              return;
            case 3:
              _DBSOURCE = value;
              state = 4;
              return;
            case 5:
              _RESULTWRAP = value;
              state = 6;
              return;
            case 0:
              revertToParentFromText(value);
              return;
          }
        }
        catch (RuntimeException e) {
          handleUnexpectedTextException(value, e);
        }
      }

      private void goto0() throws com.sun.xml.bind.unmarshaller.
          UnreportedException {
        int idx;
        state = 0;
        idx = context.getAttribute("", "RESULT-WRAP");
        if (idx >= 0) {
          context.consumeAttribute(idx);
          return;
        }
        idx = context.getAttribute("", "FETCH-SIZE");
        if (idx >= 0) {
          context.consumeAttribute(idx);
          return;
        }
        idx = context.getAttribute("", "DB-SOURCE");
        if (idx >= 0) {
          context.consumeAttribute(idx);
          return;
        }
      }

    }

  }

  public class Unmarshaller
      extends com.sun.xml.bind.unmarshaller.ContentHandlerEx {

    public Unmarshaller(com.sun.xml.bind.unmarshaller.UnmarshallingContext
                        context) {
      super(context, "------------");
    }

    protected com.sun.xml.bind.unmarshaller.UnmarshallableObject owner() {
      return sparrow.elt.jaxb.impl.DATAHANDLERTypeImpl.this;
    }

    public void enterElement(String ___uri, String ___local,
                             org.xml.sax.Attributes __atts) throws com.sun.xml.
        bind.unmarshaller.UnreportedException {
      switch (state) {
        case 3:
          if ("".equals(___uri) && "PARAM".equals(___local)) {
            context.pushAttributes(__atts);
            goto10();
            return;
          }
          revertToParentFromEnterElement(___uri, ___local, __atts);
          return;
        case 0:
          if ("".equals(___uri) && "QUERY".equals(___local)) {
            context.pushAttributes(__atts);
            goto1();
            return;
          }
          break;
      }
      super.enterElement(___uri, ___local, __atts);
    }

    public void leaveElement(String ___uri, String ___local) throws com.sun.xml.
        bind.unmarshaller.UnreportedException {
      switch (state) {
        case 3:
          revertToParentFromLeaveElement(___uri, ___local);
          return;
        case 11:
          if ("".equals(___uri) && "PARAM".equals(___local)) {
            context.popAttributes();
            goto3();
            return;
          }
          break;
        case 2:
          if ("".equals(___uri) && "QUERY".equals(___local)) {
            context.popAttributes();
            goto3();
            return;
          }
          break;
      }
      super.leaveElement(___uri, ___local);
    }

    public void enterAttribute(String ___uri, String ___local) throws com.sun.
        xml.bind.unmarshaller.UnreportedException {
      switch (state) {
        case 1:
          if ("".equals(___uri) && "DB-SOURCE".equals(___local)) {
            _QUERY = ( (sparrow.elt.jaxb.impl.DATAHANDLERTypeImpl.
                        QUERYTypeImpl) spawnChildFromEnterAttribute( (sparrow.elt.jaxb.impl.DATAHANDLERTypeImpl.QUERYTypeImpl.class), 2,
                ___uri, ___local));
            return;
          }
          if ("".equals(___uri) && "FETCH-SIZE".equals(___local)) {
            _QUERY = ( (sparrow.elt.jaxb.impl.DATAHANDLERTypeImpl.
                        QUERYTypeImpl) spawnChildFromEnterAttribute( (sparrow.elt.jaxb.impl.DATAHANDLERTypeImpl.QUERYTypeImpl.class), 2,
                ___uri, ___local));
            return;
          }
          if ("".equals(___uri) && "RESULT-WRAP".equals(___local)) {
            _QUERY = ( (sparrow.elt.jaxb.impl.DATAHANDLERTypeImpl.
                        QUERYTypeImpl) spawnChildFromEnterAttribute( (sparrow.elt.jaxb.impl.DATAHANDLERTypeImpl.QUERYTypeImpl.class), 2,
                ___uri, ___local));
            return;
          }
          break;
        case 3:
          if ("".equals(___uri) && "NAME".equals(___local)) {
            state = 6;
            return;
          }
          if ("".equals(___uri) && "TYPE".equals(___local)) {
            state = 8;
            return;
          }
          if ("".equals(___uri) && "CLASS".equals(___local)) {
            state = 4;
            return;
          }
          revertToParentFromEnterAttribute(___uri, ___local);
          return;
        case 10:
          if ("".equals(___uri) && "NAME".equals(___local)) {
            _PARAM.add( ( (sparrow.elt.jaxb.impl.PARAMTypeImpl)
                         spawnChildFromEnterAttribute( (sparrow.elt.jaxb.impl.PARAMTypeImpl.class), 11, ___uri, ___local)));
            return;
          }
          if ("".equals(___uri) && "VALUE".equals(___local)) {
            _PARAM.add( ( (sparrow.elt.jaxb.impl.PARAMTypeImpl)
                         spawnChildFromEnterAttribute( (sparrow.elt.jaxb.impl.PARAMTypeImpl.class), 11, ___uri, ___local)));
            return;
          }
          break;
      }
      super.enterAttribute(___uri, ___local);
    }

    public void leaveAttribute(String ___uri, String ___local) throws com.sun.
        xml.bind.unmarshaller.UnreportedException {
      switch (state) {
        case 3:
          revertToParentFromLeaveAttribute(___uri, ___local);
          return;
        case 7:
          if ("".equals(___uri) && "NAME".equals(___local)) {
            goto3();
            return;
          }
          break;
        case 5:
          if ("".equals(___uri) && "CLASS".equals(___local)) {
            goto3();
            return;
          }
          break;
        case 9:
          if ("".equals(___uri) && "TYPE".equals(___local)) {
            goto3();
            return;
          }
          break;
      }
      super.leaveAttribute(___uri, ___local);
    }

    public void text(String value) throws com.sun.xml.bind.unmarshaller.
        UnreportedException {
      try {
        switch (state) {
          case 6:
            _NAME = value;
            state = 7;
            return;
          case 3:
            revertToParentFromText(value);
            return;
          case 4:
            _CLASS = value;
            state = 5;
            return;
          case 8:
            _TYPE = value;
            state = 9;
            return;
        }
      }
      catch (RuntimeException e) {
        handleUnexpectedTextException(value, e);
      }
    }

    public void leaveChild(int nextState) throws com.sun.xml.bind.unmarshaller.
        UnreportedException {
      switch (nextState) {
        case 11:
          state = 11;
          return;
        case 2:
          state = 2;
          return;
      }
      super.leaveChild(nextState);
    }

    private void goto1() throws com.sun.xml.bind.unmarshaller.
        UnreportedException {
      int idx;
      state = 1;
      idx = context.getAttribute("", "RESULT-WRAP");
      if (idx >= 0) {
        context.consumeAttribute(idx);
        return;
      }
      idx = context.getAttribute("", "FETCH-SIZE");
      if (idx >= 0) {
        context.consumeAttribute(idx);
        return;
      }
      idx = context.getAttribute("", "DB-SOURCE");
      if (idx >= 0) {
        context.consumeAttribute(idx);
        return;
      }
    }

    private void goto3() throws com.sun.xml.bind.unmarshaller.
        UnreportedException {
      int idx;
      state = 3;
      idx = context.getAttribute("", "CLASS");
      if (idx >= 0) {
        context.consumeAttribute(idx);
        return;
      }
      idx = context.getAttribute("", "NAME");
      if (idx >= 0) {
        context.consumeAttribute(idx);
        return;
      }
      idx = context.getAttribute("", "TYPE");
      if (idx >= 0) {
        context.consumeAttribute(idx);
        return;
      }
    }

    private void goto10() throws com.sun.xml.bind.unmarshaller.
        UnreportedException {
      int idx;
      state = 10;
      idx = context.getAttribute("", "VALUE");
      if (idx >= 0) {
        context.consumeAttribute(idx);
        return;
      }
      idx = context.getAttribute("", "NAME");
      if (idx >= 0) {
        context.consumeAttribute(idx);
        return;
      }
    }

  }

}
