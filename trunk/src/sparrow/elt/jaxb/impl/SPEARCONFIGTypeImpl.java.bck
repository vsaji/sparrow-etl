//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vBeta 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2009.08.09 at 01:18:57 SGT 
//


package com.cs.sg.spear.jaxb.impl;

public class SPEARCONFIGTypeImpl implements com.cs.sg.spear.jaxb.SPEARCONFIGType, com.sun.xml.bind.unmarshaller.UnmarshallableObject, com.sun.xml.bind.serializer.XMLSerializable, com.sun.xml.bind.validator.ValidatableObject
{

    private final static Class PRIMARY_INTERFACE_CLASS = com.cs.sg.spear.jaxb.SPEARCONFIGType.class;
    protected com.cs.sg.spear.jaxb.DATALOOKUPType _DATALOOKUP;
    protected com.cs.sg.spear.jaxb.SERVICESType _SERVICES;
    protected com.cs.sg.spear.jaxb.RESOURCESType _RESOURCES;
    protected com.cs.sg.spear.jaxb.DATAPROVIDERSType _DATAPROVIDERS;
    protected com.cs.sg.spear.jaxb.DATAWRITERSType _DATAWRITERS;
    protected com.cs.sg.spear.jaxb.EXCEPTIONHANDLERType _EXCEPTIONHANDLER;
    protected com.cs.sg.spear.jaxb.DATATRANSFORMERType _DATATRANSFORMER;
    protected com.cs.sg.spear.jaxb.DATAEXTRACTORType _DATAEXTRACTOR;
    protected com.cs.sg.spear.jaxb.MODULEType _MODULE;
    protected com.cs.sg.spear.jaxb.NOTIFIERSType _NOTIFIERS;
    private final static com.sun.msv.grammar.Grammar schemaFragment = com.sun.xml.bind.validator.SchemaDeserializer.deserialize("\u00ac\u00ed\u0000\u0005sr\u0000\u001fcom.sun.msv.grammar.SequenceExp\u0091Ue\u00f1\u0017p\u00f3\u00ad\u0002\u0000\u0000xr\u0000\u001dcom.sun.msv.grammar.BinaryExp\u009f\u008d\u000fi<\u00c1_\u00b7\u0002\u0000\u0002L\u0000\u0004exp1t\u0000 Lcom/sun/msv/grammar/Expression;L\u0000\u0004exp2q\u0000~\u0000\u0002xr\u0000\u001ecom.sun.msv.grammar.Expression\u00f8\u0018\u0082\u00e8N5~O\u0002\u0000\u0003I\u0000\u000ecachedHashCodeL\u0000\u0013epsilonReducibilityt\u0000\u0013Ljava/lang/Boolean;L\u0000\u000bexpandedExpq\u0000~\u0000\u0002xp\u0006_/Jppsq\u0000~\u0000\u0000\u0005\u00bc\u0010\u00f2ppsq\u0000~\u0000\u0000\u0005\u0018\u00f2\u009appsq\u0000~\u0000\u0000\u0004u\u00d4Bppsq\u0000~\u0000\u0000\u0003\u00d2\u00b5\u00eappsq\u0000~\u0000\u0000\u0003/\u0097\u0092ppsq\u0000~\u0000\u0000\u0002\u008cy:ppsq\u0000~\u0000\u0000\u0001\u00e9Z\u00edppsq\u0000~\u0000\u0000\u0001F<\u0095ppsr\u0000\'com.sun.msv.grammar.trex.ElementPattern\u008b\u0010\u001fsu\u008b\u0091\u00c2\u0002\u0000\u0001L\u0000\tnameClasst\u0000\u001fLcom/sun/msv/grammar/NameClass;xr\u0000\u001ecom.sun.msv.grammar.ElementExp\u00d3\u00c6b\u0095\u0015\rC\u0092\u0002\u0000\u0002Z\u0000\u001aignoreUndeclaredAttributesL\u0000\fcontentModelq\u0000~\u0000\u0002xq\u0000~\u0000\u0003\u0000\u00a3\u001eHpp\u0000sq\u0000~\u0000\u000e\u0000\u00a3\u001e=pp\u0000sr\u0000\u001dcom.sun.msv.grammar.ChoiceExp\u00c6|\u00ec3\u0087\u00b8\u00f9\u00f4\u0002\u0000\u0000xq\u0000~\u0000\u0001\u0000\u00a3\u001e2ppsr\u0000 com.sun.msv.grammar.OneOrMoreExp\u00cc;^\u00bb\u0004E\u00cc\u00db\u0002\u0000\u0000xr\u0000\u001ccom.sun.msv.grammar.UnaryExp\'\u00bbhe^\u001f_5\u0002\u0000\u0001L\u0000\u0003expq\u0000~\u0000\u0002xq\u0000~\u0000\u0003\u0000\u00a3\u001e\'sr\u0000\u0011java.lang.Boolean\u00cd r\u0080\u00d5\u009c\u00fa\u00ee\u0002\u0000\u0001Z\u0000\u0005valuexp\u0000psr\u0000 com.sun.msv.grammar.AttributeExp0\rR\n\u00c7L\n\u0099\u0002\u0000\u0002L\u0000\u0003expq\u0000~\u0000\u0002L\u0000\tnameClassq\u0000~\u0000\u000fxq\u0000~\u0000\u0003\u0000\u00a3\u001e$q\u0000~\u0000\u0019psr\u00002com.sun.msv.grammar.Expression$AnyStringExpression\u00cb\u00b2\u00f3\u00c9\u0081\u0000\u000f\u00bc\u0002\u0000\u0000xq\u0000~\u0000\u0003\u0000\u0000\u0000\bsq\u0000~\u0000\u0018\u0001psr\u0000 com.sun.msv.grammar.AnyNameClass\u00c3p\u00af\u0013\u00eft\u0094\u00bd\u0002\u0000\u0000xr\u0000\u001dcom.sun.msv.grammar.NameClass\u009c}\u00d4kB\u00c7\tk\u0002\u0000\u0000xpsr\u00000com.sun.msv.grammar.Expression$EpsilonExpression\u0098v\u00e3\u0003Z\u00fex\u00ee\u0002\u0000\u0000xq\u0000~\u0000\u0003\u0000\u0000\u0000\tq\u0000~\u0000\u001epsr\u0000#com.sun.msv.grammar.SimpleNameClass\u0091\u00e9\u00f7\u008d\u00ab\u0010\u00aa\u00f5\u0002\u0000\u0002L\u0000\tlocalNamet\u0000\u0012Ljava/lang/String;L\u0000\fnamespaceURIq\u0000~\u0000%xq\u0000~\u0000 t\u0000\u001fcom.cs.sg.spear.jaxb.MODULETypet\u0000+http://java.sun.com/jaxb/xjc/dummy-elementssq\u0000~\u0000$t\u0000\u0006MODULEt\u0000\u0000sq\u0000~\u0000\u000e\u0000\u00a3\u001eHpp\u0000sq\u0000~\u0000\u000e\u0000\u00a3\u001e=pp\u0000sq\u0000~\u0000\u0013\u0000\u00a3\u001e2ppsq\u0000~\u0000\u0015\u0000\u00a3\u001e\'q\u0000~\u0000\u0019psq\u0000~\u0000\u001a\u0000\u00a3\u001e$q\u0000~\u0000\u0019pq\u0000~\u0000\u001dq\u0000~\u0000!q\u0000~\u0000#sq\u0000~\u0000$t\u0000&com.cs.sg.spear.jaxb.DATAEXTRACTORTypeq\u0000~\u0000(sq\u0000~\u0000$t\u0000\u000eDATA-EXTRACTORq\u0000~\u0000+sq\u0000~\u0000\u0013\u0000\u00a3\u001eSppsq\u0000~\u0000\u000e\u0000\u00a3\u001eHq\u0000~\u0000\u0019p\u0000sq\u0000~\u0000\u000e\u0000\u00a3\u001e=pp\u0000sq\u0000~\u0000\u0013\u0000\u00a3\u001e2ppsq\u0000~\u0000\u0015\u0000\u00a3\u001e\'q\u0000~\u0000\u0019psq\u0000~\u0000\u001a\u0000\u00a3\u001e$q\u0000~\u0000\u0019pq\u0000~\u0000\u001dq\u0000~\u0000!q\u0000~\u0000#sq\u0000~\u0000$t\u0000(com.cs.sg.spear.jaxb.DATATRANSFORMERTypeq\u0000~\u0000(sq\u0000~\u0000$t\u0000\u0010DATA-TRANSFORMERq\u0000~\u0000+q\u0000~\u0000#sq\u0000~\u0000\u000e\u0000\u00a3\u001eHpp\u0000sq\u0000~\u0000\u000e\u0000\u00a3\u001e=pp\u0000sq\u0000~\u0000\u0013\u0000\u00a3\u001e2ppsq\u0000~\u0000\u0015\u0000\u00a3\u001e\'q\u0000~\u0000\u0019psq\u0000~\u0000\u001a\u0000\u00a3\u001e$q\u0000~\u0000\u0019pq\u0000~\u0000\u001dq\u0000~\u0000!q\u0000~\u0000#sq\u0000~\u0000$t\u0000$com.cs.sg.spear.jaxb.DATAWRITERSTypeq\u0000~\u0000(sq\u0000~\u0000$t\u0000\fDATA-WRITERSq\u0000~\u0000+sq\u0000~\u0000\u0013\u0000\u00a3\u001eSppsq\u0000~\u0000\u000e\u0000\u00a3\u001eHq\u0000~\u0000\u0019p\u0000sq\u0000~\u0000\u000e\u0000\u00a3\u001e=pp\u0000sq\u0000~\u0000\u0013\u0000\u00a3\u001e2ppsq\u0000~\u0000\u0015\u0000\u00a3\u001e\'q\u0000~\u0000\u0019psq\u0000~\u0000\u001a\u0000\u00a3\u001e$q\u0000~\u0000\u0019pq\u0000~\u0000\u001dq\u0000~\u0000!q\u0000~\u0000#sq\u0000~\u0000$t\u0000\"com.cs.sg.spear.jaxb.RESOURCESTypeq\u0000~\u0000(sq\u0000~\u0000$t\u0000\tRESOURCESq\u0000~\u0000+q\u0000~\u0000#sq\u0000~\u0000\u0013\u0000\u00a3\u001eSppsq\u0000~\u0000\u000e\u0000\u00a3\u001eHq\u0000~\u0000\u0019p\u0000sq\u0000~\u0000\u000e\u0000\u00a3\u001e=pp\u0000sq\u0000~\u0000\u0013\u0000\u00a3\u001e2ppsq\u0000~\u0000\u0015\u0000\u00a3\u001e\'q\u0000~\u0000\u0019psq\u0000~\u0000\u001a\u0000\u00a3\u001e$q\u0000~\u0000\u0019pq\u0000~\u0000\u001dq\u0000~\u0000!q\u0000~\u0000#sq\u0000~\u0000$t\u0000!com.cs.sg.spear.jaxb.SERVICESTypeq\u0000~\u0000(sq\u0000~\u0000$t\u0000\bSERVICESq\u0000~\u0000+q\u0000~\u0000#sq\u0000~\u0000\u0013\u0000\u00a3\u001eSppsq\u0000~\u0000\u000e\u0000\u00a3\u001eHq\u0000~\u0000\u0019p\u0000sq\u0000~\u0000\u000e\u0000\u00a3\u001e=pp\u0000sq\u0000~\u0000\u0013\u0000\u00a3\u001e2ppsq\u0000~\u0000\u0015\u0000\u00a3\u001e\'q\u0000~\u0000\u0019psq\u0000~\u0000\u001a\u0000\u00a3\u001e$q\u0000~\u0000\u0019pq\u0000~\u0000\u001dq\u0000~\u0000!q\u0000~\u0000#sq\u0000~\u0000$t\u0000&com.cs.sg.spear.jaxb.DATAPROVIDERSTypeq\u0000~\u0000(sq\u0000~\u0000$t\u0000\u000eDATA-PROVIDERSq\u0000~\u0000+q\u0000~\u0000#sq\u0000~\u0000\u0013\u0000\u00a3\u001eSppsq\u0000~\u0000\u000e\u0000\u00a3\u001eHq\u0000~\u0000\u0019p\u0000sq\u0000~\u0000\u000e\u0000\u00a3\u001e=pp\u0000sq\u0000~\u0000\u0013\u0000\u00a3\u001e2ppsq\u0000~\u0000\u0015\u0000\u00a3\u001e\'q\u0000~\u0000\u0019psq\u0000~\u0000\u001a\u0000\u00a3\u001e$q\u0000~\u0000\u0019pq\u0000~\u0000\u001dq\u0000~\u0000!q\u0000~\u0000#sq\u0000~\u0000$t\u0000#com.cs.sg.spear.jaxb.DATALOOKUPTypeq\u0000~\u0000(sq\u0000~\u0000$t\u0000\u000bDATA-LOOKUPq\u0000~\u0000+q\u0000~\u0000#sq\u0000~\u0000\u0013\u0000\u00a3\u001eSppsq\u0000~\u0000\u000e\u0000\u00a3\u001eHq\u0000~\u0000\u0019p\u0000sq\u0000~\u0000\u000e\u0000\u00a3\u001e=pp\u0000sq\u0000~\u0000\u0013\u0000\u00a3\u001e2ppsq\u0000~\u0000\u0015\u0000\u00a3\u001e\'q\u0000~\u0000\u0019psq\u0000~\u0000\u001a\u0000\u00a3\u001e$q\u0000~\u0000\u0019pq\u0000~\u0000\u001dq\u0000~\u0000!q\u0000~\u0000#sq\u0000~\u0000$t\u0000)com.cs.sg.spear.jaxb.EXCEPTIONHANDLERTypeq\u0000~\u0000(sq\u0000~\u0000$t\u0000\u0011EXCEPTION-HANDLERq\u0000~\u0000+q\u0000~\u0000#sq\u0000~\u0000\u0013\u0000\u00a3\u001eSppsq\u0000~\u0000\u000e\u0000\u00a3\u001eHq\u0000~\u0000\u0019p\u0000sq\u0000~\u0000\u000e\u0000\u00a3\u001e=pp\u0000sq\u0000~\u0000\u0013\u0000\u00a3\u001e2ppsq\u0000~\u0000\u0015\u0000\u00a3\u001e\'q\u0000~\u0000\u0019psq\u0000~\u0000\u001a\u0000\u00a3\u001e$q\u0000~\u0000\u0019pq\u0000~\u0000\u001dq\u0000~\u0000!q\u0000~\u0000#sq\u0000~\u0000$t\u0000\"com.cs.sg.spear.jaxb.NOTIFIERSTypeq\u0000~\u0000(sq\u0000~\u0000$t\u0000\tNOTIFIERSq\u0000~\u0000+q\u0000~\u0000#sr\u0000\"com.sun.msv.grammar.ExpressionPool\u00e5\u00f3J;\u00cd]^\u00f8\u0002\u0000\u0001L\u0000\bexpTablet\u0000/Lcom/sun/msv/grammar/ExpressionPool$ClosedHash;xpsr\u0000-com.sun.msv.grammar.ExpressionPool$ClosedHash\u00d7j\u00d0N\u00ef\u00e8\u00ed\u001c\u0002\u0000\u0004I\u0000\u0005countI\u0000\tthresholdL\u0000\u0006parentq\u0000~\u0000\u0085[\u0000\u0005tablet\u0000![Lcom/sun/msv/grammar/Expression;xp\u0000\u0000\u0000$\u0000\u0000\u00009pur\u0000![Lcom.sun.msv.grammar.Expression;\u00d68D\u00c3]\u00ad\u00a7\n\u0002\u0000\u0000xp\u0000\u0000\u0000\u00bfppppppppq\u0000~\u0000\u0017q\u0000~\u0000/q\u0000~\u00009q\u0000~\u0000Bq\u0000~\u0000Lq\u0000~\u0000Vq\u0000~\u0000`q\u0000~\u0000jq\u0000~\u0000tq\u0000~\u0000~pq\u0000~\u0000\u0014q\u0000~\u0000.q\u0000~\u00008q\u0000~\u0000Aq\u0000~\u0000Kq\u0000~\u0000Uq\u0000~\u0000_q\u0000~\u0000iq\u0000~\u0000sq\u0000~\u0000}pppppppq\u0000~\u0000\u0007pppppppppppppppq\u0000~\u00005q\u0000~\u0000Hq\u0000~\u0000Rq\u0000~\u0000\\q\u0000~\u0000\nq\u0000~\u0000fq\u0000~\u0000pq\u0000~\u0000zpppppppppppppppppppppppppppq\u0000~\u0000\rpppppq\u0000~\u0000\u0006pppppppppppppppppppq\u0000~\u0000\tppppppppppppppppppppppppppppppq\u0000~\u0000\fpppppq\u0000~\u0000\u0005pppppppppppppppppppq\u0000~\u0000\bpppppppppppppppppppq\u0000~\u0000\u000b");

    public com.cs.sg.spear.jaxb.DATALOOKUPType getDATALOOKUP() {
        return _DATALOOKUP;
    }

    public void setDATALOOKUP(com.cs.sg.spear.jaxb.DATALOOKUPType value) {
        _DATALOOKUP = value;
    }

    public com.cs.sg.spear.jaxb.SERVICESType getSERVICES() {
        return _SERVICES;
    }

    public void setSERVICES(com.cs.sg.spear.jaxb.SERVICESType value) {
        _SERVICES = value;
    }

    public com.cs.sg.spear.jaxb.RESOURCESType getRESOURCES() {
        return _RESOURCES;
    }

    public void setRESOURCES(com.cs.sg.spear.jaxb.RESOURCESType value) {
        _RESOURCES = value;
    }

    public com.cs.sg.spear.jaxb.DATAPROVIDERSType getDATAPROVIDERS() {
        return _DATAPROVIDERS;
    }

    public void setDATAPROVIDERS(com.cs.sg.spear.jaxb.DATAPROVIDERSType value) {
        _DATAPROVIDERS = value;
    }

    public com.cs.sg.spear.jaxb.DATAWRITERSType getDATAWRITERS() {
        return _DATAWRITERS;
    }

    public void setDATAWRITERS(com.cs.sg.spear.jaxb.DATAWRITERSType value) {
        _DATAWRITERS = value;
    }

    public com.cs.sg.spear.jaxb.EXCEPTIONHANDLERType getEXCEPTIONHANDLER() {
        return _EXCEPTIONHANDLER;
    }

    public void setEXCEPTIONHANDLER(com.cs.sg.spear.jaxb.EXCEPTIONHANDLERType value) {
        _EXCEPTIONHANDLER = value;
    }

    public com.cs.sg.spear.jaxb.DATATRANSFORMERType getDATATRANSFORMER() {
        return _DATATRANSFORMER;
    }

    public void setDATATRANSFORMER(com.cs.sg.spear.jaxb.DATATRANSFORMERType value) {
        _DATATRANSFORMER = value;
    }

    public com.cs.sg.spear.jaxb.DATAEXTRACTORType getDATAEXTRACTOR() {
        return _DATAEXTRACTOR;
    }

    public void setDATAEXTRACTOR(com.cs.sg.spear.jaxb.DATAEXTRACTORType value) {
        _DATAEXTRACTOR = value;
    }

    public com.cs.sg.spear.jaxb.MODULEType getMODULE() {
        return _MODULE;
    }

    public void setMODULE(com.cs.sg.spear.jaxb.MODULEType value) {
        _MODULE = value;
    }

    public com.cs.sg.spear.jaxb.NOTIFIERSType getNOTIFIERS() {
        return _NOTIFIERS;
    }

    public void setNOTIFIERS(com.cs.sg.spear.jaxb.NOTIFIERSType value) {
        _NOTIFIERS = value;
    }

    public com.sun.xml.bind.unmarshaller.ContentHandlerEx getUnmarshaller(com.sun.xml.bind.unmarshaller.UnmarshallingContext context) {
        return new com.cs.sg.spear.jaxb.impl.SPEARCONFIGTypeImpl.Unmarshaller(context);
    }

    public Class getPrimaryInterfaceClass() {
        return PRIMARY_INTERFACE_CLASS;
    }

    public void serializeElements(com.sun.xml.bind.serializer.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        context.startElement("", "MODULE");
        context.childAsAttributes(((com.sun.xml.bind.serializer.XMLSerializable) _MODULE));
        context.endAttributes();
        context.childAsElements(((com.sun.xml.bind.serializer.XMLSerializable) _MODULE));
        context.endElement();
        context.startElement("", "DATA-EXTRACTOR");
        context.childAsAttributes(((com.sun.xml.bind.serializer.XMLSerializable) _DATAEXTRACTOR));
        context.endAttributes();
        context.childAsElements(((com.sun.xml.bind.serializer.XMLSerializable) _DATAEXTRACTOR));
        context.endElement();
        if (_DATATRANSFORMER!= null) {
            context.startElement("", "DATA-TRANSFORMER");
            context.childAsAttributes(((com.sun.xml.bind.serializer.XMLSerializable) _DATATRANSFORMER));
            context.endAttributes();
            context.childAsElements(((com.sun.xml.bind.serializer.XMLSerializable) _DATATRANSFORMER));
            context.endElement();
        }
        context.startElement("", "DATA-WRITERS");
        context.childAsAttributes(((com.sun.xml.bind.serializer.XMLSerializable) _DATAWRITERS));
        context.endAttributes();
        context.childAsElements(((com.sun.xml.bind.serializer.XMLSerializable) _DATAWRITERS));
        context.endElement();
        if (_RESOURCES!= null) {
            context.startElement("", "RESOURCES");
            context.childAsAttributes(((com.sun.xml.bind.serializer.XMLSerializable) _RESOURCES));
            context.endAttributes();
            context.childAsElements(((com.sun.xml.bind.serializer.XMLSerializable) _RESOURCES));
            context.endElement();
        }
        if (_SERVICES!= null) {
            context.startElement("", "SERVICES");
            context.childAsAttributes(((com.sun.xml.bind.serializer.XMLSerializable) _SERVICES));
            context.endAttributes();
            context.childAsElements(((com.sun.xml.bind.serializer.XMLSerializable) _SERVICES));
            context.endElement();
        }
        if (_DATAPROVIDERS!= null) {
            context.startElement("", "DATA-PROVIDERS");
            context.childAsAttributes(((com.sun.xml.bind.serializer.XMLSerializable) _DATAPROVIDERS));
            context.endAttributes();
            context.childAsElements(((com.sun.xml.bind.serializer.XMLSerializable) _DATAPROVIDERS));
            context.endElement();
        }
        if (_DATALOOKUP!= null) {
            context.startElement("", "DATA-LOOKUP");
            context.childAsAttributes(((com.sun.xml.bind.serializer.XMLSerializable) _DATALOOKUP));
            context.endAttributes();
            context.childAsElements(((com.sun.xml.bind.serializer.XMLSerializable) _DATALOOKUP));
            context.endElement();
        }
        if (_EXCEPTIONHANDLER!= null) {
            context.startElement("", "EXCEPTION-HANDLER");
            context.childAsAttributes(((com.sun.xml.bind.serializer.XMLSerializable) _EXCEPTIONHANDLER));
            context.endAttributes();
            context.childAsElements(((com.sun.xml.bind.serializer.XMLSerializable) _EXCEPTIONHANDLER));
            context.endElement();
        }
        if (_NOTIFIERS!= null) {
            context.startElement("", "NOTIFIERS");
            context.childAsAttributes(((com.sun.xml.bind.serializer.XMLSerializable) _NOTIFIERS));
            context.endAttributes();
            context.childAsElements(((com.sun.xml.bind.serializer.XMLSerializable) _NOTIFIERS));
            context.endElement();
        }
    }

    public void serializeAttributes(com.sun.xml.bind.serializer.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
    }

    public void serializeAttributeBodies(com.sun.xml.bind.serializer.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
    }

    public Class getPrimaryInterface() {
        return (com.cs.sg.spear.jaxb.SPEARCONFIGType.class);
    }

    public com.sun.msv.verifier.DocumentDeclaration createRawValidator() {
        return new com.sun.msv.verifier.regexp.REDocumentDeclaration(schemaFragment);
    }

    public class Unmarshaller
        extends com.sun.xml.bind.unmarshaller.ContentHandlerEx
    {


        public Unmarshaller(com.sun.xml.bind.unmarshaller.UnmarshallingContext context) {
            super(context, "------------------------");
        }

        protected com.sun.xml.bind.unmarshaller.UnmarshallableObject owner() {
            return com.cs.sg.spear.jaxb.impl.SPEARCONFIGTypeImpl.this;
        }

        public void enterElement(String ___uri, String ___local, org.xml.sax.Attributes __atts)
            throws com.sun.xml.bind.unmarshaller.UnreportedException
        {
            switch (state) {
                case  4 :
                    if ("".equals(___uri)&&"PARAM".equals(___local)) {
                        _DATAEXTRACTOR = ((com.cs.sg.spear.jaxb.impl.DATAEXTRACTORTypeImpl) spawnChildFromEnterElement((com.cs.sg.spear.jaxb.impl.DATAEXTRACTORTypeImpl.class), 5, ___uri, ___local, __atts));
                        return ;
                    }
                    break;
                case  7 :
                    if ("".equals(___uri)&&"WRITER".equals(___local)) {
                        _DATAWRITERS = ((com.cs.sg.spear.jaxb.impl.DATAWRITERSTypeImpl) spawnChildFromEnterElement((com.cs.sg.spear.jaxb.impl.DATAWRITERSTypeImpl.class), 8, ___uri, ___local, __atts));
                        return ;
                    }
                    break;
                case  10 :
                    if ("".equals(___uri)&&"SERVICE".equals(___local)) {
                        _SERVICES = ((com.cs.sg.spear.jaxb.impl.SERVICESTypeImpl) spawnChildFromEnterElement((com.cs.sg.spear.jaxb.impl.SERVICESTypeImpl.class), 11, ___uri, ___local, __atts));
                        return ;
                    }
                    break;
                case  9 :
                    if ("".equals(___uri)&&"NOTIFIERS".equals(___local)) {
                        context.pushAttributes(__atts);
                        state = 20;
                        return ;
                    }
                    if ("".equals(___uri)&&"DATA-LOOKUP".equals(___local)) {
                        context.pushAttributes(__atts);
                        state = 18;
                        return ;
                    }
                    if ("".equals(___uri)&&"EXCEPTION-HANDLER".equals(___local)) {
                        context.pushAttributes(__atts);
                        state = 14;
                        return ;
                    }
                    if ("".equals(___uri)&&"DATA-PROVIDERS".equals(___local)) {
                        context.pushAttributes(__atts);
                        state = 12;
                        return ;
                    }
                    if ("".equals(___uri)&&"SERVICES".equals(___local)) {
                        context.pushAttributes(__atts);
                        state = 10;
                        return ;
                    }
                    if ("".equals(___uri)&&"RESOURCES".equals(___local)) {
                        context.pushAttributes(__atts);
                        state = 16;
                        return ;
                    }
                    revertToParentFromEnterElement(___uri, ___local, __atts);
                    return ;
                case  0 :
                    if ("".equals(___uri)&&"MODULE".equals(___local)) {
                        context.pushAttributes(__atts);
                        state = 1;
                        return ;
                    }
                    break;
                case  12 :
                    if ("".equals(___uri)&&"DATA-PROVIDER".equals(___local)) {
                        _DATAPROVIDERS = ((com.cs.sg.spear.jaxb.impl.DATAPROVIDERSTypeImpl) spawnChildFromEnterElement((com.cs.sg.spear.jaxb.impl.DATAPROVIDERSTypeImpl.class), 13, ___uri, ___local, __atts));
                        return ;
                    }
                    break;
                case  18 :
                    if ("".equals(___uri)&&"LOOKUP".equals(___local)) {
                        _DATALOOKUP = ((com.cs.sg.spear.jaxb.impl.DATALOOKUPTypeImpl) spawnChildFromEnterElement((com.cs.sg.spear.jaxb.impl.DATALOOKUPTypeImpl.class), 19, ___uri, ___local, __atts));
                        return ;
                    }
                    break;
                case  3 :
                    if ("".equals(___uri)&&"DATA-EXTRACTOR".equals(___local)) {
                        context.pushAttributes(__atts);
                        goto4();
                        return ;
                    }
                    break;
                case  1 :
                    if ("".equals(___uri)&&"NAME".equals(___local)) {
                        _MODULE = ((com.cs.sg.spear.jaxb.impl.MODULETypeImpl) spawnChildFromEnterElement((com.cs.sg.spear.jaxb.impl.MODULETypeImpl.class), 2, ___uri, ___local, __atts));
                        return ;
                    }
                    break;
                case  14 :
                    if ("".equals(___uri)&&"HANDLER".equals(___local)) {
                        _EXCEPTIONHANDLER = ((com.cs.sg.spear.jaxb.impl.EXCEPTIONHANDLERTypeImpl) spawnChildFromEnterElement((com.cs.sg.spear.jaxb.impl.EXCEPTIONHANDLERTypeImpl.class), 15, ___uri, ___local, __atts));
                        return ;
                    }
                    break;
                case  22 :
                    if ("".equals(___uri)&&"PARAM".equals(___local)) {
                        _DATATRANSFORMER = ((com.cs.sg.spear.jaxb.impl.DATATRANSFORMERTypeImpl) spawnChildFromEnterElement((com.cs.sg.spear.jaxb.impl.DATATRANSFORMERTypeImpl.class), 23, ___uri, ___local, __atts));
                        return ;
                    }
                    break;
                case  20 :
                    if ("".equals(___uri)&&"NOTIFIER".equals(___local)) {
                        _NOTIFIERS = ((com.cs.sg.spear.jaxb.impl.NOTIFIERSTypeImpl) spawnChildFromEnterElement((com.cs.sg.spear.jaxb.impl.NOTIFIERSTypeImpl.class), 21, ___uri, ___local, __atts));
                        return ;
                    }
                    break;
                case  6 :
                    if ("".equals(___uri)&&"DATA-TRANSFORMER".equals(___local)) {
                        context.pushAttributes(__atts);
                        goto22();
                        return ;
                    }
                    if ("".equals(___uri)&&"DATA-WRITERS".equals(___local)) {
                        context.pushAttributes(__atts);
                        state = 7;
                        return ;
                    }
                    break;
                case  16 :
                    if ("".equals(___uri)&&"RESOURCE".equals(___local)) {
                        _RESOURCES = ((com.cs.sg.spear.jaxb.impl.RESOURCESTypeImpl) spawnChildFromEnterElement((com.cs.sg.spear.jaxb.impl.RESOURCESTypeImpl.class), 17, ___uri, ___local, __atts));
                        return ;
                    }
                    break;
            }
            super.enterElement(___uri, ___local, __atts);
        }

        public void leaveElement(String ___uri, String ___local)
            throws com.sun.xml.bind.unmarshaller.UnreportedException
        {
            switch (state) {
                case  21 :
                    if ("".equals(___uri)&&"NOTIFIERS".equals(___local)) {
                        context.popAttributes();
                        state = 9;
                        return ;
                    }
                    break;
                case  9 :
                    revertToParentFromLeaveElement(___uri, ___local);
                    return ;
                case  11 :
                    if ("".equals(___uri)&&"SERVICES".equals(___local)) {
                        context.popAttributes();
                        state = 9;
                        return ;
                    }
                    break;
                case  19 :
                    if ("".equals(___uri)&&"DATA-LOOKUP".equals(___local)) {
                        context.popAttributes();
                        state = 9;
                        return ;
                    }
                    break;
                case  15 :
                    if ("".equals(___uri)&&"EXCEPTION-HANDLER".equals(___local)) {
                        context.popAttributes();
                        state = 9;
                        return ;
                    }
                    break;
                case  2 :
                    if ("".equals(___uri)&&"MODULE".equals(___local)) {
                        context.popAttributes();
                        state = 3;
                        return ;
                    }
                    break;
                case  5 :
                    if ("".equals(___uri)&&"DATA-EXTRACTOR".equals(___local)) {
                        context.popAttributes();
                        state = 6;
                        return ;
                    }
                    break;
                case  13 :
                    if ("".equals(___uri)&&"DATA-PROVIDERS".equals(___local)) {
                        context.popAttributes();
                        state = 9;
                        return ;
                    }
                    break;
                case  8 :
                    if ("".equals(___uri)&&"DATA-WRITERS".equals(___local)) {
                        context.popAttributes();
                        state = 9;
                        return ;
                    }
                    break;
                case  17 :
                    if ("".equals(___uri)&&"RESOURCES".equals(___local)) {
                        context.popAttributes();
                        state = 9;
                        return ;
                    }
                    break;
                case  23 :
                    if ("".equals(___uri)&&"DATA-TRANSFORMER".equals(___local)) {
                        context.popAttributes();
                        state = 6;
                        return ;
                    }
                    break;
            }
            super.leaveElement(___uri, ___local);
        }

        public void enterAttribute(String ___uri, String ___local)
            throws com.sun.xml.bind.unmarshaller.UnreportedException
        {
            switch (state) {
                case  4 :
                    if ("".equals(___uri)&&"NAME".equals(___local)) {
                        _DATAEXTRACTOR = ((com.cs.sg.spear.jaxb.impl.DATAEXTRACTORTypeImpl) spawnChildFromEnterAttribute((com.cs.sg.spear.jaxb.impl.DATAEXTRACTORTypeImpl.class), 5, ___uri, ___local));
                        return ;
                    }
                    if ("".equals(___uri)&&"TYPE".equals(___local)) {
                        _DATAEXTRACTOR = ((com.cs.sg.spear.jaxb.impl.DATAEXTRACTORTypeImpl) spawnChildFromEnterAttribute((com.cs.sg.spear.jaxb.impl.DATAEXTRACTORTypeImpl.class), 5, ___uri, ___local));
                        return ;
                    }
                    if ("".equals(___uri)&&"CLASS".equals(___local)) {
                        _DATAEXTRACTOR = ((com.cs.sg.spear.jaxb.impl.DATAEXTRACTORTypeImpl) spawnChildFromEnterAttribute((com.cs.sg.spear.jaxb.impl.DATAEXTRACTORTypeImpl.class), 5, ___uri, ___local));
                        return ;
                    }
                    break;
                case  9 :
                    revertToParentFromEnterAttribute(___uri, ___local);
                    return ;
                case  22 :
                    if ("".equals(___uri)&&"CLASS".equals(___local)) {
                        _DATATRANSFORMER = ((com.cs.sg.spear.jaxb.impl.DATATRANSFORMERTypeImpl) spawnChildFromEnterAttribute((com.cs.sg.spear.jaxb.impl.DATATRANSFORMERTypeImpl.class), 23, ___uri, ___local));
                        return ;
                    }
                    if ("".equals(___uri)&&"TYPE".equals(___local)) {
                        _DATATRANSFORMER = ((com.cs.sg.spear.jaxb.impl.DATATRANSFORMERTypeImpl) spawnChildFromEnterAttribute((com.cs.sg.spear.jaxb.impl.DATATRANSFORMERTypeImpl.class), 23, ___uri, ___local));
                        return ;
                    }
                    if ("".equals(___uri)&&"THREAD-COUNT".equals(___local)) {
                        _DATATRANSFORMER = ((com.cs.sg.spear.jaxb.impl.DATATRANSFORMERTypeImpl) spawnChildFromEnterAttribute((com.cs.sg.spear.jaxb.impl.DATATRANSFORMERTypeImpl.class), 23, ___uri, ___local));
                        return ;
                    }
                    if ("".equals(___uri)&&"NAME".equals(___local)) {
                        _DATATRANSFORMER = ((com.cs.sg.spear.jaxb.impl.DATATRANSFORMERTypeImpl) spawnChildFromEnterAttribute((com.cs.sg.spear.jaxb.impl.DATATRANSFORMERTypeImpl.class), 23, ___uri, ___local));
                        return ;
                    }
                    if ("".equals(___uri)&&"POOL-SIZE".equals(___local)) {
                        _DATATRANSFORMER = ((com.cs.sg.spear.jaxb.impl.DATATRANSFORMERTypeImpl) spawnChildFromEnterAttribute((com.cs.sg.spear.jaxb.impl.DATATRANSFORMERTypeImpl.class), 23, ___uri, ___local));
                        return ;
                    }
                    break;
            }
            super.enterAttribute(___uri, ___local);
        }

        public void leaveAttribute(String ___uri, String ___local)
            throws com.sun.xml.bind.unmarshaller.UnreportedException
        {
            switch (state) {
                case  9 :
                    revertToParentFromLeaveAttribute(___uri, ___local);
                    return ;
            }
            super.leaveAttribute(___uri, ___local);
        }

        public void text(String value)
            throws com.sun.xml.bind.unmarshaller.UnreportedException
        {
            try {
                switch (state) {
                    case  9 :
                        revertToParentFromText(value);
                        return ;
                }
            } catch (RuntimeException e) {
                handleUnexpectedTextException(value, e);
            }
        }

        public void leaveChild(int nextState)
            throws com.sun.xml.bind.unmarshaller.UnreportedException
        {
            switch (nextState) {
                case  21 :
                    state = 21;
                    return ;
                case  5 :
                    state = 5;
                    return ;
                case  13 :
                    state = 13;
                    return ;
                case  8 :
                    state = 8;
                    return ;
                case  11 :
                    state = 11;
                    return ;
                case  17 :
                    state = 17;
                    return ;
                case  19 :
                    state = 19;
                    return ;
                case  23 :
                    state = 23;
                    return ;
                case  15 :
                    state = 15;
                    return ;
                case  2 :
                    state = 2;
                    return ;
            }
            super.leaveChild(nextState);
        }

        private void goto4()
            throws com.sun.xml.bind.unmarshaller.UnreportedException
        {
            int idx;
            state = 4;
            idx = context.getAttribute("", "NAME");
            if (idx >= 0) {
                context.consumeAttribute(idx);
                return ;
            }
            idx = context.getAttribute("", "TYPE");
            if (idx >= 0) {
                context.consumeAttribute(idx);
                return ;
            }
            idx = context.getAttribute("", "CLASS");
            if (idx >= 0) {
                context.consumeAttribute(idx);
                return ;
            }
        }

        private void goto22()
            throws com.sun.xml.bind.unmarshaller.UnreportedException
        {
            int idx;
            state = 22;
            idx = context.getAttribute("", "NAME");
            if (idx >= 0) {
                context.consumeAttribute(idx);
                return ;
            }
            idx = context.getAttribute("", "TYPE");
            if (idx >= 0) {
                context.consumeAttribute(idx);
                return ;
            }
            idx = context.getAttribute("", "POOL-SIZE");
            if (idx >= 0) {
                context.consumeAttribute(idx);
                return ;
            }
            idx = context.getAttribute("", "CLASS");
            if (idx >= 0) {
                context.consumeAttribute(idx);
                return ;
            }
            idx = context.getAttribute("", "THREAD-COUNT");
            if (idx >= 0) {
                context.consumeAttribute(idx);
                return ;
            }
        }

    }

}
