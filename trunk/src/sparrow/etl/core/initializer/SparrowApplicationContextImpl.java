/* Generated by Together */

package sparrow.etl.core.initializer;

import java.sql.Connection;
import java.sql.SQLException;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;

import org.springframework.context.ApplicationContext;

import sparrow.etl.core.config.IConfiguration;
import sparrow.etl.core.context.ContextVariables;
import sparrow.etl.core.context.SparrowApplicationContext;
import sparrow.etl.core.dao.provider.DataProviderElement;
import sparrow.etl.core.dao.provider.DataProviderElementResolver;
import sparrow.etl.core.exception.ProviderNotFoundException;
import sparrow.etl.core.exception.ResourceException;
import sparrow.etl.core.exception.ServiceUnavailableException;
import sparrow.etl.core.exception.SparrowRuntimeException;
import sparrow.etl.core.resource.Resource;
import sparrow.etl.core.resource.ResourceManager;
import sparrow.etl.core.services.PluggableService;
import sparrow.etl.core.transaction.SparrowTransactionManager;
import sparrow.etl.core.transformer.DataTransformer;
import sparrow.etl.core.transformer.DataTransformerFactory;

/**
 *
 * <p>Title: </p>
 * <p>Description: </p>
 * <p>Copyright: Copyright (c) 2004</p>
 * <p>Company: </p>
 * @author Saji Venugopalan
 * @version 1.0
 */
public final class SparrowApplicationContextImpl
    implements SparrowApplicationContext {

  private Map services = null;
  private DataProviderElementResolver dpcr = null;
  private DataTransformerFactory poolManager = null;
  private ResourceManager rs = null;
  private Map contextAttributes = null;

  private final IConfiguration _config;
  private final String _appName, _appDescription, _processId;

  /**
   *
   * @param config IConfiguration
   */
  SparrowApplicationContextImpl(IConfiguration config) {
    this._config = config;
    this._appName = config.getModule().getName();
    this._appDescription = config.getModule().getDescription();
    this._processId = config.getModule().getProcessId();
    this.services = new HashMap();
    rs = new ResourceManager();
    this.contextAttributes = new HashMap();
  }

  /**
   *
   * @param serviceName String
   * @param service PluggableService
   */
  void addService(String serviceName, PluggableService service) {
    services.put(serviceName, service);
  }

  /**
   *
   * @param dsName String
   * @throws SQLException
   * @return Connection
   */
  public Connection getDBConnection(String dsName) throws SQLException {
    try {
      return (Connection) getResource(dsName).getResource(Resource.
          NOT_IN_TRANSACTION);
    }
    catch (ResourceException ex) {
      return null;
    }
  }

  /**
   *
   * @param serviceName String
   * @throws ServiceUnavailableException
   * @return PluggableService
   */
  public PluggableService getService(String serviceName) throws
      ServiceUnavailableException {
    if (services.containsKey(serviceName)) {
      return (PluggableService) services.get(serviceName);
    }
    else {
      throw new ServiceUnavailableException("Service :" + serviceName +
                                            " is not available or configured");
    }
  }

  /**
   *
   * @return IConfiguration
   */
  public IConfiguration getConfiguration() {
    return this._config;
  }

  /**
   *
   * @param paramName String
   * @return String
   */
  public String getContextParam(String paramName) {
    return this._config.getModule().getParameterValue(paramName);
  }

  /**
   * getServices
   *
   * @return Collection
   */
  public Collection getServices() {
    return services.values();
  }

  /**
   * getTransactionEnabledConnection
   *
   * @param dsName String
   * @return Connection
   */
  public Connection getTransactionEnabledDBConnection(String dsName) throws
      SQLException {
    try {
      return (Connection) getResource(dsName).getResource(Resource.
          IN_TRANSACTION);
    }
    catch (ResourceException ex) {
      return null;
    }
  }

  /**
   * getTransactionManager
   *
   * @return SparrowTransactionManager
   */
  public SparrowTransactionManager getTransactionManager() {
    return SparrowTransactionManager.getTransactionManager();
  }

  /**
   * getDataProviderElement
   *
   * @param dataHandlerName String
   * @return DataProviderElement
   */
  public DataProviderElement getDataProviderElement(String dataHandlerName) {
    if (_config.getDataProviders().isProviderExists(dataHandlerName)) {
      return dpcr.getDataProviderElement(_config.getDataProviders().getProvider(
          dataHandlerName));
    }
    else {
      throw new ProviderNotFoundException("Data Provider [" + dataHandlerName +
                                          "] not exists.");
    }
  }

  /**
   *
   * @param dpcr DataProviderElementResolver
   */
  void setDataProviderElementResolver(DataProviderElementResolver dpcr) {
    this.dpcr = dpcr;
  }

  /**
   * getDataTransformer
   *
   * @return DataTransformer
   */
  public DataTransformer getDataTransformer() {
    return poolManager.getDataTransformer();
  }

  /**
   *
   * @param factory IUserObjectFactory
   */
  public void setDataTransformerFactory(DataTransformerFactory poolManager) {
    this.poolManager = poolManager;
  }

  /**
   *
   * @param poolManager DataTransformerFactory
   */
  public DataTransformerFactory getDataTransformerFactory() {
    return poolManager;
  }

  /**
   * getResource
   *
   * @param dsName String
   * @return Resource
   */
  public Resource getResource(String dsName) throws ResourceException {
    return rs.getResource(dsName);
  }

  /**
   * getResourceManager
   *
   * @return ResourceManager
   */
  public ResourceManager getResourceManager() {
    return rs;
  }

  /**
   * getAppDescription
   *
   * @return String
   */
  public String getAppDescription() {
    return _appDescription;
  }

  /**
   * getAppName
   *
   * @return String
   */
  public String getAppName() {
    return _appName;
  }

  /**
   * getProcessId
   *
   * @return String
   */
  public String getProcessId() {
    return _processId;
  }

  /**
   * getAttribute
   *
   * @param name String
   * @return Object
   */
  public Object getAttribute(String name) {
    return contextAttributes.get(name);
  }

  /**
   * setAttribute
   *
   * @param name String
   * @param value Object
   */
  public void setAttribute(String name, Object value) {
    if(ContextVariables.SPARROW_CONTEXT_VARS.contains(name) && value==null){
      throw new SparrowRuntimeException("Value [null] cannot be set to reserved context varaibles ["+name+"]");
    }
    contextAttributes.put(name, value);
  }

  /**
   * getSpringBean
   *
   * @param name String
   * @return Object
   */
  public Object getBean(String name) {
    try {
     Resource r = getResource(name);
     String resourceType = r.getType().getResourceType();
     if (resourceType.equals("EJB")) {
       return  r.getResource();
     }
     else {
       throw new ResourceException("Resource Type [" +
                                   r.getType().getResourceType() +
                                   "] doesn't support getBean method.");
     }
   }
   catch (ResourceException ex) {
     ex.printStackTrace();
   }
   return null;
  }

  /**
   * getSpringBean
   *
   * @param resourceName String
   * @param name String
   * @return Object
   */
  public Object getBean(String resourceName, String name) {
    try {
      Resource r = getResource(resourceName);
      String resourceType = r.getType().getResourceType();
      if (resourceType.equals("SPRING")) {
        ApplicationContext ac = (ApplicationContext) r.getResource();
        return ac.getBean(name);
      }
      else {
        throw new ResourceException("Resource Type [" +
                                    r.getType().getResourceType() +
                                    "] doesn't support getBean method.");
      }
    }
    catch (ResourceException ex) {
      ex.printStackTrace();
    }
    return null;
  }

  /**
   * getAttributes
   *
   * @return Map
   */
  public Map getAttributes() {
    return contextAttributes;
  }

}
